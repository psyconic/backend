// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiscountAttributes(t *testing.T) {
	t.Parallel()

	query := DiscountAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiscountAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DiscountAttributes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscountAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiscountAttributeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DiscountAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiscountAttributeExists to return true, but got false.")
	}
}

func testDiscountAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	discountAttributeFound, err := FindDiscountAttribute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if discountAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiscountAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DiscountAttributes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiscountAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DiscountAttributes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiscountAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	discountAttributeOne := &DiscountAttribute{}
	discountAttributeTwo := &DiscountAttribute{}
	if err = randomize.Struct(seed, discountAttributeOne, discountAttributeDBTypes, false, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, discountAttributeTwo, discountAttributeDBTypes, false, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discountAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discountAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiscountAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiscountAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	discountAttributeOne := &DiscountAttribute{}
	discountAttributeTwo := &DiscountAttribute{}
	if err = randomize.Struct(seed, discountAttributeOne, discountAttributeDBTypes, false, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, discountAttributeTwo, discountAttributeDBTypes, false, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discountAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discountAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func discountAttributeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func discountAttributeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountAttribute) error {
	*o = DiscountAttribute{}
	return nil
}

func testDiscountAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DiscountAttribute{}
	o := &DiscountAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute object: %s", err)
	}

	AddDiscountAttributeHook(boil.BeforeInsertHook, discountAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	discountAttributeBeforeInsertHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.AfterInsertHook, discountAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	discountAttributeAfterInsertHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.AfterSelectHook, discountAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	discountAttributeAfterSelectHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.BeforeUpdateHook, discountAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	discountAttributeBeforeUpdateHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.AfterUpdateHook, discountAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	discountAttributeAfterUpdateHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.BeforeDeleteHook, discountAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	discountAttributeBeforeDeleteHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.AfterDeleteHook, discountAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	discountAttributeAfterDeleteHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.BeforeUpsertHook, discountAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	discountAttributeBeforeUpsertHooks = []DiscountAttributeHook{}

	AddDiscountAttributeHook(boil.AfterUpsertHook, discountAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	discountAttributeAfterUpsertHooks = []DiscountAttributeHook{}
}

func testDiscountAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscountAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(discountAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscountAttributeToManyDiscountMetaAttributes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountAttribute
	var b, c DiscountMetaAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, discountMetaAttributeDBTypes, false, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discountMetaAttributeDBTypes, false, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.DiscountAttributesID, a.ID)
	queries.Assign(&c.DiscountAttributesID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DiscountMetaAttributes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.DiscountAttributesID, b.DiscountAttributesID) {
			bFound = true
		}
		if queries.Equal(v.DiscountAttributesID, c.DiscountAttributesID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DiscountAttributeSlice{&a}
	if err = a.L.LoadDiscountMetaAttributes(ctx, tx, false, (*[]*DiscountAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiscountMetaAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DiscountMetaAttributes = nil
	if err = a.L.LoadDiscountMetaAttributes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DiscountMetaAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDiscountAttributeToManyAddOpDiscountMetaAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountAttribute
	var b, c, d, e DiscountMetaAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DiscountMetaAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, discountMetaAttributeDBTypes, false, strmangle.SetComplement(discountMetaAttributePrimaryKeyColumns, discountMetaAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*DiscountMetaAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDiscountMetaAttributes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.DiscountAttributesID) {
			t.Error("foreign key was wrong value", a.ID, first.DiscountAttributesID)
		}
		if !queries.Equal(a.ID, second.DiscountAttributesID) {
			t.Error("foreign key was wrong value", a.ID, second.DiscountAttributesID)
		}

		if first.R.DiscountAttribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.DiscountAttribute != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DiscountMetaAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DiscountMetaAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DiscountMetaAttributes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDiscountAttributeToManySetOpDiscountMetaAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountAttribute
	var b, c, d, e DiscountMetaAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DiscountMetaAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, discountMetaAttributeDBTypes, false, strmangle.SetComplement(discountMetaAttributePrimaryKeyColumns, discountMetaAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetDiscountMetaAttributes(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetDiscountMetaAttributes(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DiscountAttributesID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DiscountAttributesID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.DiscountAttributesID) {
		t.Error("foreign key was wrong value", a.ID, d.DiscountAttributesID)
	}
	if !queries.Equal(a.ID, e.DiscountAttributesID) {
		t.Error("foreign key was wrong value", a.ID, e.DiscountAttributesID)
	}

	if b.R.DiscountAttribute != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DiscountAttribute != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DiscountAttribute != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.DiscountAttribute != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.DiscountMetaAttributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.DiscountMetaAttributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testDiscountAttributeToManyRemoveOpDiscountMetaAttributes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountAttribute
	var b, c, d, e DiscountMetaAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*DiscountMetaAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, discountMetaAttributeDBTypes, false, strmangle.SetComplement(discountMetaAttributePrimaryKeyColumns, discountMetaAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddDiscountMetaAttributes(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveDiscountMetaAttributes(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.DiscountAttributesID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.DiscountAttributesID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.DiscountAttribute != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.DiscountAttribute != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.DiscountAttribute != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.DiscountAttribute != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.DiscountMetaAttributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.DiscountMetaAttributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.DiscountMetaAttributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testDiscountAttributeToOneDiscountUsingDiscount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DiscountAttribute
	var foreign Discount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, discountDBTypes, false, discountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Discount struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DiscountID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Discount().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiscountAttributeSlice{&local}
	if err = local.L.LoadDiscount(ctx, tx, false, (*[]*DiscountAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Discount == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Discount = nil
	if err = local.L.LoadDiscount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Discount == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiscountAttributeToOneSetOpDiscountUsingDiscount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountAttribute
	var b, c Discount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Discount{&b, &c} {
		err = a.SetDiscount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Discount != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DiscountAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DiscountID, x.ID) {
			t.Error("foreign key was wrong value", a.DiscountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DiscountID))
		reflect.Indirect(reflect.ValueOf(&a.DiscountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DiscountID, x.ID) {
			t.Error("foreign key was wrong value", a.DiscountID, x.ID)
		}
	}
}

func testDiscountAttributeToOneRemoveOpDiscountUsingDiscount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountAttribute
	var b Discount

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discountDBTypes, false, strmangle.SetComplement(discountPrimaryKeyColumns, discountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDiscount(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDiscount(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Discount().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Discount != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DiscountID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DiscountAttributes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDiscountAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscountAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscountAttributeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscountAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiscountAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	discountAttributeDBTypes = map[string]string{`ID`: `int`, `DiscountID`: `int`, `Name`: `varchar`}
	_                        = bytes.MinRead
)

func testDiscountAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(discountAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(discountAttributeAllColumns) == len(discountAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiscountAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(discountAttributeAllColumns) == len(discountAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiscountAttribute{}
	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discountAttributeDBTypes, true, discountAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(discountAttributeAllColumns, discountAttributePrimaryKeyColumns) {
		fields = discountAttributeAllColumns
	} else {
		fields = strmangle.SetComplement(
			discountAttributeAllColumns,
			discountAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiscountAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiscountAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(discountAttributeAllColumns) == len(discountAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDiscountAttributeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DiscountAttribute{}
	if err = randomize.Struct(seed, &o, discountAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiscountAttribute: %s", err)
	}

	count, err := DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, discountAttributeDBTypes, false, discountAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiscountAttribute: %s", err)
	}

	count, err = DiscountAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
