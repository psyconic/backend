// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiscountAttribute is an object representing the database table.
type DiscountAttribute struct {
	ID         int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiscountID null.Int `boil:"discount_id" json:"discount_id,omitempty" toml:"discount_id" yaml:"discount_id,omitempty"`
	Name       string   `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *discountAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discountAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscountAttributeColumns = struct {
	ID         string
	DiscountID string
	Name       string
}{
	ID:         "id",
	DiscountID: "discount_id",
	Name:       "name",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DiscountAttributeWhere = struct {
	ID         whereHelperint
	DiscountID whereHelpernull_Int
	Name       whereHelperstring
}{
	ID:         whereHelperint{field: "`discount_attributes`.`id`"},
	DiscountID: whereHelpernull_Int{field: "`discount_attributes`.`discount_id`"},
	Name:       whereHelperstring{field: "`discount_attributes`.`name`"},
}

// DiscountAttributeRels is where relationship names are stored.
var DiscountAttributeRels = struct {
	Discount               string
	DiscountMetaAttributes string
}{
	Discount:               "Discount",
	DiscountMetaAttributes: "DiscountMetaAttributes",
}

// discountAttributeR is where relationships are stored.
type discountAttributeR struct {
	Discount               *Discount                  `boil:"Discount" json:"Discount" toml:"Discount" yaml:"Discount"`
	DiscountMetaAttributes DiscountMetaAttributeSlice `boil:"DiscountMetaAttributes" json:"DiscountMetaAttributes" toml:"DiscountMetaAttributes" yaml:"DiscountMetaAttributes"`
}

// NewStruct creates a new relationship struct
func (*discountAttributeR) NewStruct() *discountAttributeR {
	return &discountAttributeR{}
}

// discountAttributeL is where Load methods for each relationship are stored.
type discountAttributeL struct{}

var (
	discountAttributeAllColumns            = []string{"id", "discount_id", "name"}
	discountAttributeColumnsWithoutDefault = []string{"id", "discount_id", "name"}
	discountAttributeColumnsWithDefault    = []string{}
	discountAttributePrimaryKeyColumns     = []string{"id"}
)

type (
	// DiscountAttributeSlice is an alias for a slice of pointers to DiscountAttribute.
	// This should generally be used opposed to []DiscountAttribute.
	DiscountAttributeSlice []*DiscountAttribute
	// DiscountAttributeHook is the signature for custom DiscountAttribute hook methods
	DiscountAttributeHook func(context.Context, boil.ContextExecutor, *DiscountAttribute) error

	discountAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discountAttributeType                 = reflect.TypeOf(&DiscountAttribute{})
	discountAttributeMapping              = queries.MakeStructMapping(discountAttributeType)
	discountAttributePrimaryKeyMapping, _ = queries.BindMapping(discountAttributeType, discountAttributeMapping, discountAttributePrimaryKeyColumns)
	discountAttributeInsertCacheMut       sync.RWMutex
	discountAttributeInsertCache          = make(map[string]insertCache)
	discountAttributeUpdateCacheMut       sync.RWMutex
	discountAttributeUpdateCache          = make(map[string]updateCache)
	discountAttributeUpsertCacheMut       sync.RWMutex
	discountAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var discountAttributeBeforeInsertHooks []DiscountAttributeHook
var discountAttributeBeforeUpdateHooks []DiscountAttributeHook
var discountAttributeBeforeDeleteHooks []DiscountAttributeHook
var discountAttributeBeforeUpsertHooks []DiscountAttributeHook

var discountAttributeAfterInsertHooks []DiscountAttributeHook
var discountAttributeAfterSelectHooks []DiscountAttributeHook
var discountAttributeAfterUpdateHooks []DiscountAttributeHook
var discountAttributeAfterDeleteHooks []DiscountAttributeHook
var discountAttributeAfterUpsertHooks []DiscountAttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscountAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscountAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscountAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscountAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscountAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscountAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscountAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscountAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscountAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscountAttributeHook registers your hook function for all future operations.
func AddDiscountAttributeHook(hookPoint boil.HookPoint, discountAttributeHook DiscountAttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		discountAttributeBeforeInsertHooks = append(discountAttributeBeforeInsertHooks, discountAttributeHook)
	case boil.BeforeUpdateHook:
		discountAttributeBeforeUpdateHooks = append(discountAttributeBeforeUpdateHooks, discountAttributeHook)
	case boil.BeforeDeleteHook:
		discountAttributeBeforeDeleteHooks = append(discountAttributeBeforeDeleteHooks, discountAttributeHook)
	case boil.BeforeUpsertHook:
		discountAttributeBeforeUpsertHooks = append(discountAttributeBeforeUpsertHooks, discountAttributeHook)
	case boil.AfterInsertHook:
		discountAttributeAfterInsertHooks = append(discountAttributeAfterInsertHooks, discountAttributeHook)
	case boil.AfterSelectHook:
		discountAttributeAfterSelectHooks = append(discountAttributeAfterSelectHooks, discountAttributeHook)
	case boil.AfterUpdateHook:
		discountAttributeAfterUpdateHooks = append(discountAttributeAfterUpdateHooks, discountAttributeHook)
	case boil.AfterDeleteHook:
		discountAttributeAfterDeleteHooks = append(discountAttributeAfterDeleteHooks, discountAttributeHook)
	case boil.AfterUpsertHook:
		discountAttributeAfterUpsertHooks = append(discountAttributeAfterUpsertHooks, discountAttributeHook)
	}
}

// One returns a single discountAttribute record from the query.
func (q discountAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiscountAttribute, error) {
	o := &DiscountAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for discount_attributes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscountAttribute records from the query.
func (q discountAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiscountAttributeSlice, error) {
	var o []*DiscountAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiscountAttribute slice")
	}

	if len(discountAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscountAttribute records in the query.
func (q discountAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count discount_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discountAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if discount_attributes exists")
	}

	return count > 0, nil
}

// Discount pointed to by the foreign key.
func (o *DiscountAttribute) Discount(mods ...qm.QueryMod) discountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DiscountID),
	}

	queryMods = append(queryMods, mods...)

	query := Discounts(queryMods...)
	queries.SetFrom(query.Query, "`discount`")

	return query
}

// DiscountMetaAttributes retrieves all the discount_meta_attribute's DiscountMetaAttributes with an executor.
func (o *DiscountAttribute) DiscountMetaAttributes(mods ...qm.QueryMod) discountMetaAttributeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`discount_meta_attributes`.`discount_attributes_id`=?", o.ID),
	)

	query := DiscountMetaAttributes(queryMods...)
	queries.SetFrom(query.Query, "`discount_meta_attributes`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`discount_meta_attributes`.*"})
	}

	return query
}

// LoadDiscount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (discountAttributeL) LoadDiscount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscountAttribute interface{}, mods queries.Applicator) error {
	var slice []*DiscountAttribute
	var object *DiscountAttribute

	if singular {
		object = maybeDiscountAttribute.(*DiscountAttribute)
	} else {
		slice = *maybeDiscountAttribute.(*[]*DiscountAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountAttributeR{}
		}
		if !queries.IsNil(object.DiscountID) {
			args = append(args, object.DiscountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DiscountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DiscountID) {
				args = append(args, obj.DiscountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`discount`),
		qm.WhereIn(`discount.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Discount")
	}

	var resultSlice []*Discount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Discount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for discount")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discount")
	}

	if len(discountAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Discount = foreign
		if foreign.R == nil {
			foreign.R = &discountR{}
		}
		foreign.R.DiscountAttributes = append(foreign.R.DiscountAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DiscountID, foreign.ID) {
				local.R.Discount = foreign
				if foreign.R == nil {
					foreign.R = &discountR{}
				}
				foreign.R.DiscountAttributes = append(foreign.R.DiscountAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadDiscountMetaAttributes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discountAttributeL) LoadDiscountMetaAttributes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscountAttribute interface{}, mods queries.Applicator) error {
	var slice []*DiscountAttribute
	var object *DiscountAttribute

	if singular {
		object = maybeDiscountAttribute.(*DiscountAttribute)
	} else {
		slice = *maybeDiscountAttribute.(*[]*DiscountAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountAttributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`discount_meta_attributes`),
		qm.WhereIn(`discount_meta_attributes.discount_attributes_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load discount_meta_attributes")
	}

	var resultSlice []*DiscountMetaAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice discount_meta_attributes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on discount_meta_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discount_meta_attributes")
	}

	if len(discountMetaAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DiscountMetaAttributes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &discountMetaAttributeR{}
			}
			foreign.R.DiscountAttribute = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DiscountAttributesID) {
				local.R.DiscountMetaAttributes = append(local.R.DiscountMetaAttributes, foreign)
				if foreign.R == nil {
					foreign.R = &discountMetaAttributeR{}
				}
				foreign.R.DiscountAttribute = local
				break
			}
		}
	}

	return nil
}

// SetDiscount of the discountAttribute to the related item.
// Sets o.R.Discount to related.
// Adds o to related.R.DiscountAttributes.
func (o *DiscountAttribute) SetDiscount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Discount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `discount_attributes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"discount_id"}),
		strmangle.WhereClause("`", "`", 0, discountAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DiscountID, related.ID)
	if o.R == nil {
		o.R = &discountAttributeR{
			Discount: related,
		}
	} else {
		o.R.Discount = related
	}

	if related.R == nil {
		related.R = &discountR{
			DiscountAttributes: DiscountAttributeSlice{o},
		}
	} else {
		related.R.DiscountAttributes = append(related.R.DiscountAttributes, o)
	}

	return nil
}

// RemoveDiscount relationship.
// Sets o.R.Discount to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DiscountAttribute) RemoveDiscount(ctx context.Context, exec boil.ContextExecutor, related *Discount) error {
	var err error

	queries.SetScanner(&o.DiscountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("discount_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Discount = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DiscountAttributes {
		if queries.Equal(o.DiscountID, ri.DiscountID) {
			continue
		}

		ln := len(related.R.DiscountAttributes)
		if ln > 1 && i < ln-1 {
			related.R.DiscountAttributes[i] = related.R.DiscountAttributes[ln-1]
		}
		related.R.DiscountAttributes = related.R.DiscountAttributes[:ln-1]
		break
	}
	return nil
}

// AddDiscountMetaAttributes adds the given related objects to the existing relationships
// of the discount_attribute, optionally inserting them as new records.
// Appends related to o.R.DiscountMetaAttributes.
// Sets related.R.DiscountAttribute appropriately.
func (o *DiscountAttribute) AddDiscountMetaAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiscountMetaAttribute) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DiscountAttributesID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `discount_meta_attributes` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"discount_attributes_id"}),
				strmangle.WhereClause("`", "`", 0, discountMetaAttributePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DiscountAttributesID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &discountAttributeR{
			DiscountMetaAttributes: related,
		}
	} else {
		o.R.DiscountMetaAttributes = append(o.R.DiscountMetaAttributes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &discountMetaAttributeR{
				DiscountAttribute: o,
			}
		} else {
			rel.R.DiscountAttribute = o
		}
	}
	return nil
}

// SetDiscountMetaAttributes removes all previously related items of the
// discount_attribute replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DiscountAttribute's DiscountMetaAttributes accordingly.
// Replaces o.R.DiscountMetaAttributes with related.
// Sets related.R.DiscountAttribute's DiscountMetaAttributes accordingly.
func (o *DiscountAttribute) SetDiscountMetaAttributes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DiscountMetaAttribute) error {
	query := "update `discount_meta_attributes` set `discount_attributes_id` = null where `discount_attributes_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DiscountMetaAttributes {
			queries.SetScanner(&rel.DiscountAttributesID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DiscountAttribute = nil
		}

		o.R.DiscountMetaAttributes = nil
	}
	return o.AddDiscountMetaAttributes(ctx, exec, insert, related...)
}

// RemoveDiscountMetaAttributes relationships from objects passed in.
// Removes related items from R.DiscountMetaAttributes (uses pointer comparison, removal does not keep order)
// Sets related.R.DiscountAttribute.
func (o *DiscountAttribute) RemoveDiscountMetaAttributes(ctx context.Context, exec boil.ContextExecutor, related ...*DiscountMetaAttribute) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DiscountAttributesID, nil)
		if rel.R != nil {
			rel.R.DiscountAttribute = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("discount_attributes_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DiscountMetaAttributes {
			if rel != ri {
				continue
			}

			ln := len(o.R.DiscountMetaAttributes)
			if ln > 1 && i < ln-1 {
				o.R.DiscountMetaAttributes[i] = o.R.DiscountMetaAttributes[ln-1]
			}
			o.R.DiscountMetaAttributes = o.R.DiscountMetaAttributes[:ln-1]
			break
		}
	}

	return nil
}

// DiscountAttributes retrieves all the records using an executor.
func DiscountAttributes(mods ...qm.QueryMod) discountAttributeQuery {
	mods = append(mods, qm.From("`discount_attributes`"))
	return discountAttributeQuery{NewQuery(mods...)}
}

// FindDiscountAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscountAttribute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DiscountAttribute, error) {
	discountAttributeObj := &DiscountAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `discount_attributes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, discountAttributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from discount_attributes")
	}

	return discountAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscountAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_attributes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discountAttributeInsertCacheMut.RLock()
	cache, cached := discountAttributeInsertCache[key]
	discountAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discountAttributeAllColumns,
			discountAttributeColumnsWithDefault,
			discountAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discountAttributeType, discountAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discountAttributeType, discountAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `discount_attributes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `discount_attributes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `discount_attributes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, discountAttributePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into discount_attributes")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for discount_attributes")
	}

CacheNoHooks:
	if !cached {
		discountAttributeInsertCacheMut.Lock()
		discountAttributeInsertCache[key] = cache
		discountAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DiscountAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscountAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discountAttributeUpdateCacheMut.RLock()
	cache, cached := discountAttributeUpdateCache[key]
	discountAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discountAttributeAllColumns,
			discountAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update discount_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `discount_attributes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, discountAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discountAttributeType, discountAttributeMapping, append(wl, discountAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update discount_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for discount_attributes")
	}

	if !cached {
		discountAttributeUpdateCacheMut.Lock()
		discountAttributeUpdateCache[key] = cache
		discountAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discountAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for discount_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for discount_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscountAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `discount_attributes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in discountAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all discountAttribute")
	}
	return rowsAff, nil
}

var mySQLDiscountAttributeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscountAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_attributes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountAttributeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDiscountAttributeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discountAttributeUpsertCacheMut.RLock()
	cache, cached := discountAttributeUpsertCache[key]
	discountAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discountAttributeAllColumns,
			discountAttributeColumnsWithDefault,
			discountAttributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			discountAttributeAllColumns,
			discountAttributePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert discount_attributes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`discount_attributes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `discount_attributes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(discountAttributeType, discountAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discountAttributeType, discountAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for discount_attributes")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(discountAttributeType, discountAttributeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for discount_attributes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for discount_attributes")
	}

CacheNoHooks:
	if !cached {
		discountAttributeUpsertCacheMut.Lock()
		discountAttributeUpsertCache[key] = cache
		discountAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DiscountAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscountAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscountAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discountAttributePrimaryKeyMapping)
	sql := "DELETE FROM `discount_attributes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from discount_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for discount_attributes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discountAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no discountAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discount_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscountAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(discountAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `discount_attributes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discountAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_attributes")
	}

	if len(discountAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscountAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiscountAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscountAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscountAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `discount_attributes`.* FROM `discount_attributes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiscountAttributeSlice")
	}

	*o = slice

	return nil
}

// DiscountAttributeExists checks if the DiscountAttribute row exists.
func DiscountAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `discount_attributes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if discount_attributes exists")
	}

	return exists, nil
}
