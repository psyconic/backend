// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDiscountMetaAttributes(t *testing.T) {
	t.Parallel()

	query := DiscountMetaAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDiscountMetaAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountMetaAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := DiscountMetaAttributes().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountMetaAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscountMetaAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDiscountMetaAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DiscountMetaAttributeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if DiscountMetaAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DiscountMetaAttributeExists to return true, but got false.")
	}
}

func testDiscountMetaAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	discountMetaAttributeFound, err := FindDiscountMetaAttribute(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if discountMetaAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDiscountMetaAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = DiscountMetaAttributes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDiscountMetaAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := DiscountMetaAttributes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDiscountMetaAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	discountMetaAttributeOne := &DiscountMetaAttribute{}
	discountMetaAttributeTwo := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, discountMetaAttributeOne, discountMetaAttributeDBTypes, false, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, discountMetaAttributeTwo, discountMetaAttributeDBTypes, false, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discountMetaAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discountMetaAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiscountMetaAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDiscountMetaAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	discountMetaAttributeOne := &DiscountMetaAttribute{}
	discountMetaAttributeTwo := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, discountMetaAttributeOne, discountMetaAttributeDBTypes, false, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, discountMetaAttributeTwo, discountMetaAttributeDBTypes, false, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = discountMetaAttributeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = discountMetaAttributeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func discountMetaAttributeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func discountMetaAttributeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *DiscountMetaAttribute) error {
	*o = DiscountMetaAttribute{}
	return nil
}

func testDiscountMetaAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &DiscountMetaAttribute{}
	o := &DiscountMetaAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute object: %s", err)
	}

	AddDiscountMetaAttributeHook(boil.BeforeInsertHook, discountMetaAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeBeforeInsertHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.AfterInsertHook, discountMetaAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeAfterInsertHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.AfterSelectHook, discountMetaAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeAfterSelectHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.BeforeUpdateHook, discountMetaAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeBeforeUpdateHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.AfterUpdateHook, discountMetaAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeAfterUpdateHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.BeforeDeleteHook, discountMetaAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeBeforeDeleteHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.AfterDeleteHook, discountMetaAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeAfterDeleteHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.BeforeUpsertHook, discountMetaAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeBeforeUpsertHooks = []DiscountMetaAttributeHook{}

	AddDiscountMetaAttributeHook(boil.AfterUpsertHook, discountMetaAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	discountMetaAttributeAfterUpsertHooks = []DiscountMetaAttributeHook{}
}

func testDiscountMetaAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscountMetaAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(discountMetaAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDiscountMetaAttributeToOneDiscountAttributeUsingDiscountAttribute(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local DiscountMetaAttribute
	var foreign DiscountAttribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, discountAttributeDBTypes, false, discountAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountAttribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.DiscountAttributesID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DiscountAttribute().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := DiscountMetaAttributeSlice{&local}
	if err = local.L.LoadDiscountAttribute(ctx, tx, false, (*[]*DiscountMetaAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DiscountAttribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DiscountAttribute = nil
	if err = local.L.LoadDiscountAttribute(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DiscountAttribute == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testDiscountMetaAttributeToOneSetOpDiscountAttributeUsingDiscountAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountMetaAttribute
	var b, c DiscountAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountMetaAttributeDBTypes, false, strmangle.SetComplement(discountMetaAttributePrimaryKeyColumns, discountMetaAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DiscountAttribute{&b, &c} {
		err = a.SetDiscountAttribute(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DiscountAttribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.DiscountMetaAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.DiscountAttributesID, x.ID) {
			t.Error("foreign key was wrong value", a.DiscountAttributesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DiscountAttributesID))
		reflect.Indirect(reflect.ValueOf(&a.DiscountAttributesID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.DiscountAttributesID, x.ID) {
			t.Error("foreign key was wrong value", a.DiscountAttributesID, x.ID)
		}
	}
}

func testDiscountMetaAttributeToOneRemoveOpDiscountAttributeUsingDiscountAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a DiscountMetaAttribute
	var b DiscountAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, discountMetaAttributeDBTypes, false, strmangle.SetComplement(discountMetaAttributePrimaryKeyColumns, discountMetaAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discountAttributeDBTypes, false, strmangle.SetComplement(discountAttributePrimaryKeyColumns, discountAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetDiscountAttribute(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveDiscountAttribute(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.DiscountAttribute().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.DiscountAttribute != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.DiscountAttributesID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.DiscountMetaAttributes) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testDiscountMetaAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscountMetaAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DiscountMetaAttributeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDiscountMetaAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := DiscountMetaAttributes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	discountMetaAttributeDBTypes = map[string]string{`ID`: `int`, `DiscountAttributesID`: `int`, `Name`: `varchar`, `Value`: `varchar`}
	_                            = bytes.MinRead
)

func testDiscountMetaAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(discountMetaAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(discountMetaAttributeAllColumns) == len(discountMetaAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDiscountMetaAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(discountMetaAttributeAllColumns) == len(discountMetaAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &DiscountMetaAttribute{}
	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, discountMetaAttributeDBTypes, true, discountMetaAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(discountMetaAttributeAllColumns, discountMetaAttributePrimaryKeyColumns) {
		fields = discountMetaAttributeAllColumns
	} else {
		fields = strmangle.SetComplement(
			discountMetaAttributeAllColumns,
			discountMetaAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DiscountMetaAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDiscountMetaAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(discountMetaAttributeAllColumns) == len(discountMetaAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDiscountMetaAttributeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := DiscountMetaAttribute{}
	if err = randomize.Struct(seed, &o, discountMetaAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiscountMetaAttribute: %s", err)
	}

	count, err := DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, discountMetaAttributeDBTypes, false, discountMetaAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize DiscountMetaAttribute struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert DiscountMetaAttribute: %s", err)
	}

	count, err = DiscountMetaAttributes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
