// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DiscountMetaAttribute is an object representing the database table.
type DiscountMetaAttribute struct {
	ID                   int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiscountAttributesID null.Int `boil:"discount_attributes_id" json:"discount_attributes_id,omitempty" toml:"discount_attributes_id" yaml:"discount_attributes_id,omitempty"`
	Name                 string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	Value                string   `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *discountMetaAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discountMetaAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscountMetaAttributeColumns = struct {
	ID                   string
	DiscountAttributesID string
	Name                 string
	Value                string
}{
	ID:                   "id",
	DiscountAttributesID: "discount_attributes_id",
	Name:                 "name",
	Value:                "value",
}

// Generated where

var DiscountMetaAttributeWhere = struct {
	ID                   whereHelperint
	DiscountAttributesID whereHelpernull_Int
	Name                 whereHelperstring
	Value                whereHelperstring
}{
	ID:                   whereHelperint{field: "`discount_meta_attributes`.`id`"},
	DiscountAttributesID: whereHelpernull_Int{field: "`discount_meta_attributes`.`discount_attributes_id`"},
	Name:                 whereHelperstring{field: "`discount_meta_attributes`.`name`"},
	Value:                whereHelperstring{field: "`discount_meta_attributes`.`value`"},
}

// DiscountMetaAttributeRels is where relationship names are stored.
var DiscountMetaAttributeRels = struct {
	DiscountAttribute string
}{
	DiscountAttribute: "DiscountAttribute",
}

// discountMetaAttributeR is where relationships are stored.
type discountMetaAttributeR struct {
	DiscountAttribute *DiscountAttribute `boil:"DiscountAttribute" json:"DiscountAttribute" toml:"DiscountAttribute" yaml:"DiscountAttribute"`
}

// NewStruct creates a new relationship struct
func (*discountMetaAttributeR) NewStruct() *discountMetaAttributeR {
	return &discountMetaAttributeR{}
}

// discountMetaAttributeL is where Load methods for each relationship are stored.
type discountMetaAttributeL struct{}

var (
	discountMetaAttributeAllColumns            = []string{"id", "discount_attributes_id", "name", "value"}
	discountMetaAttributeColumnsWithoutDefault = []string{"id", "discount_attributes_id", "name", "value"}
	discountMetaAttributeColumnsWithDefault    = []string{}
	discountMetaAttributePrimaryKeyColumns     = []string{"id"}
)

type (
	// DiscountMetaAttributeSlice is an alias for a slice of pointers to DiscountMetaAttribute.
	// This should generally be used opposed to []DiscountMetaAttribute.
	DiscountMetaAttributeSlice []*DiscountMetaAttribute
	// DiscountMetaAttributeHook is the signature for custom DiscountMetaAttribute hook methods
	DiscountMetaAttributeHook func(context.Context, boil.ContextExecutor, *DiscountMetaAttribute) error

	discountMetaAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discountMetaAttributeType                 = reflect.TypeOf(&DiscountMetaAttribute{})
	discountMetaAttributeMapping              = queries.MakeStructMapping(discountMetaAttributeType)
	discountMetaAttributePrimaryKeyMapping, _ = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, discountMetaAttributePrimaryKeyColumns)
	discountMetaAttributeInsertCacheMut       sync.RWMutex
	discountMetaAttributeInsertCache          = make(map[string]insertCache)
	discountMetaAttributeUpdateCacheMut       sync.RWMutex
	discountMetaAttributeUpdateCache          = make(map[string]updateCache)
	discountMetaAttributeUpsertCacheMut       sync.RWMutex
	discountMetaAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var discountMetaAttributeBeforeInsertHooks []DiscountMetaAttributeHook
var discountMetaAttributeBeforeUpdateHooks []DiscountMetaAttributeHook
var discountMetaAttributeBeforeDeleteHooks []DiscountMetaAttributeHook
var discountMetaAttributeBeforeUpsertHooks []DiscountMetaAttributeHook

var discountMetaAttributeAfterInsertHooks []DiscountMetaAttributeHook
var discountMetaAttributeAfterSelectHooks []DiscountMetaAttributeHook
var discountMetaAttributeAfterUpdateHooks []DiscountMetaAttributeHook
var discountMetaAttributeAfterDeleteHooks []DiscountMetaAttributeHook
var discountMetaAttributeAfterUpsertHooks []DiscountMetaAttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscountMetaAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscountMetaAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscountMetaAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscountMetaAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscountMetaAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscountMetaAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscountMetaAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscountMetaAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscountMetaAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range discountMetaAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscountMetaAttributeHook registers your hook function for all future operations.
func AddDiscountMetaAttributeHook(hookPoint boil.HookPoint, discountMetaAttributeHook DiscountMetaAttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		discountMetaAttributeBeforeInsertHooks = append(discountMetaAttributeBeforeInsertHooks, discountMetaAttributeHook)
	case boil.BeforeUpdateHook:
		discountMetaAttributeBeforeUpdateHooks = append(discountMetaAttributeBeforeUpdateHooks, discountMetaAttributeHook)
	case boil.BeforeDeleteHook:
		discountMetaAttributeBeforeDeleteHooks = append(discountMetaAttributeBeforeDeleteHooks, discountMetaAttributeHook)
	case boil.BeforeUpsertHook:
		discountMetaAttributeBeforeUpsertHooks = append(discountMetaAttributeBeforeUpsertHooks, discountMetaAttributeHook)
	case boil.AfterInsertHook:
		discountMetaAttributeAfterInsertHooks = append(discountMetaAttributeAfterInsertHooks, discountMetaAttributeHook)
	case boil.AfterSelectHook:
		discountMetaAttributeAfterSelectHooks = append(discountMetaAttributeAfterSelectHooks, discountMetaAttributeHook)
	case boil.AfterUpdateHook:
		discountMetaAttributeAfterUpdateHooks = append(discountMetaAttributeAfterUpdateHooks, discountMetaAttributeHook)
	case boil.AfterDeleteHook:
		discountMetaAttributeAfterDeleteHooks = append(discountMetaAttributeAfterDeleteHooks, discountMetaAttributeHook)
	case boil.AfterUpsertHook:
		discountMetaAttributeAfterUpsertHooks = append(discountMetaAttributeAfterUpsertHooks, discountMetaAttributeHook)
	}
}

// One returns a single discountMetaAttribute record from the query.
func (q discountMetaAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DiscountMetaAttribute, error) {
	o := &DiscountMetaAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for discount_meta_attributes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscountMetaAttribute records from the query.
func (q discountMetaAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (DiscountMetaAttributeSlice, error) {
	var o []*DiscountMetaAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiscountMetaAttribute slice")
	}

	if len(discountMetaAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscountMetaAttribute records in the query.
func (q discountMetaAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count discount_meta_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discountMetaAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if discount_meta_attributes exists")
	}

	return count > 0, nil
}

// DiscountAttribute pointed to by the foreign key.
func (o *DiscountMetaAttribute) DiscountAttribute(mods ...qm.QueryMod) discountAttributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DiscountAttributesID),
	}

	queryMods = append(queryMods, mods...)

	query := DiscountAttributes(queryMods...)
	queries.SetFrom(query.Query, "`discount_attributes`")

	return query
}

// LoadDiscountAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (discountMetaAttributeL) LoadDiscountAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDiscountMetaAttribute interface{}, mods queries.Applicator) error {
	var slice []*DiscountMetaAttribute
	var object *DiscountMetaAttribute

	if singular {
		object = maybeDiscountMetaAttribute.(*DiscountMetaAttribute)
	} else {
		slice = *maybeDiscountMetaAttribute.(*[]*DiscountMetaAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountMetaAttributeR{}
		}
		if !queries.IsNil(object.DiscountAttributesID) {
			args = append(args, object.DiscountAttributesID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountMetaAttributeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.DiscountAttributesID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.DiscountAttributesID) {
				args = append(args, obj.DiscountAttributesID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`discount_attributes`),
		qm.WhereIn(`discount_attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DiscountAttribute")
	}

	var resultSlice []*DiscountAttribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DiscountAttribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for discount_attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for discount_attributes")
	}

	if len(discountMetaAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DiscountAttribute = foreign
		if foreign.R == nil {
			foreign.R = &discountAttributeR{}
		}
		foreign.R.DiscountMetaAttributes = append(foreign.R.DiscountMetaAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DiscountAttributesID, foreign.ID) {
				local.R.DiscountAttribute = foreign
				if foreign.R == nil {
					foreign.R = &discountAttributeR{}
				}
				foreign.R.DiscountMetaAttributes = append(foreign.R.DiscountMetaAttributes, local)
				break
			}
		}
	}

	return nil
}

// SetDiscountAttribute of the discountMetaAttribute to the related item.
// Sets o.R.DiscountAttribute to related.
// Adds o to related.R.DiscountMetaAttributes.
func (o *DiscountMetaAttribute) SetDiscountAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DiscountAttribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `discount_meta_attributes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"discount_attributes_id"}),
		strmangle.WhereClause("`", "`", 0, discountMetaAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DiscountAttributesID, related.ID)
	if o.R == nil {
		o.R = &discountMetaAttributeR{
			DiscountAttribute: related,
		}
	} else {
		o.R.DiscountAttribute = related
	}

	if related.R == nil {
		related.R = &discountAttributeR{
			DiscountMetaAttributes: DiscountMetaAttributeSlice{o},
		}
	} else {
		related.R.DiscountMetaAttributes = append(related.R.DiscountMetaAttributes, o)
	}

	return nil
}

// RemoveDiscountAttribute relationship.
// Sets o.R.DiscountAttribute to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *DiscountMetaAttribute) RemoveDiscountAttribute(ctx context.Context, exec boil.ContextExecutor, related *DiscountAttribute) error {
	var err error

	queries.SetScanner(&o.DiscountAttributesID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("discount_attributes_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.DiscountAttribute = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.DiscountMetaAttributes {
		if queries.Equal(o.DiscountAttributesID, ri.DiscountAttributesID) {
			continue
		}

		ln := len(related.R.DiscountMetaAttributes)
		if ln > 1 && i < ln-1 {
			related.R.DiscountMetaAttributes[i] = related.R.DiscountMetaAttributes[ln-1]
		}
		related.R.DiscountMetaAttributes = related.R.DiscountMetaAttributes[:ln-1]
		break
	}
	return nil
}

// DiscountMetaAttributes retrieves all the records using an executor.
func DiscountMetaAttributes(mods ...qm.QueryMod) discountMetaAttributeQuery {
	mods = append(mods, qm.From("`discount_meta_attributes`"))
	return discountMetaAttributeQuery{NewQuery(mods...)}
}

// FindDiscountMetaAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscountMetaAttribute(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*DiscountMetaAttribute, error) {
	discountMetaAttributeObj := &DiscountMetaAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `discount_meta_attributes` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, discountMetaAttributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from discount_meta_attributes")
	}

	return discountMetaAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscountMetaAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_meta_attributes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountMetaAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discountMetaAttributeInsertCacheMut.RLock()
	cache, cached := discountMetaAttributeInsertCache[key]
	discountMetaAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discountMetaAttributeAllColumns,
			discountMetaAttributeColumnsWithDefault,
			discountMetaAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `discount_meta_attributes` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `discount_meta_attributes` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `discount_meta_attributes` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, discountMetaAttributePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into discount_meta_attributes")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for discount_meta_attributes")
	}

CacheNoHooks:
	if !cached {
		discountMetaAttributeInsertCacheMut.Lock()
		discountMetaAttributeInsertCache[key] = cache
		discountMetaAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DiscountMetaAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscountMetaAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discountMetaAttributeUpdateCacheMut.RLock()
	cache, cached := discountMetaAttributeUpdateCache[key]
	discountMetaAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discountMetaAttributeAllColumns,
			discountMetaAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update discount_meta_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `discount_meta_attributes` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, discountMetaAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, append(wl, discountMetaAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update discount_meta_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for discount_meta_attributes")
	}

	if !cached {
		discountMetaAttributeUpdateCacheMut.Lock()
		discountMetaAttributeUpdateCache[key] = cache
		discountMetaAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discountMetaAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for discount_meta_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for discount_meta_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscountMetaAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountMetaAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `discount_meta_attributes` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountMetaAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in discountMetaAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all discountMetaAttribute")
	}
	return rowsAff, nil
}

var mySQLDiscountMetaAttributeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscountMetaAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_meta_attributes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountMetaAttributeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDiscountMetaAttributeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discountMetaAttributeUpsertCacheMut.RLock()
	cache, cached := discountMetaAttributeUpsertCache[key]
	discountMetaAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discountMetaAttributeAllColumns,
			discountMetaAttributeColumnsWithDefault,
			discountMetaAttributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			discountMetaAttributeAllColumns,
			discountMetaAttributePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert discount_meta_attributes, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`discount_meta_attributes`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `discount_meta_attributes` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for discount_meta_attributes")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(discountMetaAttributeType, discountMetaAttributeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for discount_meta_attributes")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for discount_meta_attributes")
	}

CacheNoHooks:
	if !cached {
		discountMetaAttributeUpsertCacheMut.Lock()
		discountMetaAttributeUpsertCache[key] = cache
		discountMetaAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DiscountMetaAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscountMetaAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscountMetaAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discountMetaAttributePrimaryKeyMapping)
	sql := "DELETE FROM `discount_meta_attributes` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from discount_meta_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for discount_meta_attributes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discountMetaAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no discountMetaAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discount_meta_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_meta_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscountMetaAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(discountMetaAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountMetaAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `discount_meta_attributes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountMetaAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discountMetaAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_meta_attributes")
	}

	if len(discountMetaAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscountMetaAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDiscountMetaAttribute(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscountMetaAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscountMetaAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountMetaAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `discount_meta_attributes`.* FROM `discount_meta_attributes` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, discountMetaAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiscountMetaAttributeSlice")
	}

	*o = slice

	return nil
}

// DiscountMetaAttributeExists checks if the DiscountMetaAttribute row exists.
func DiscountMetaAttributeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `discount_meta_attributes` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if discount_meta_attributes exists")
	}

	return exists, nil
}
